/*
*			Copyright Author
* (USE & RESTRICTIONS - Please read COPYRIGHT file)

* Version		: XX.XX
* Date		: 4/20/11 1:09 PM
*/

package DWLProject;

import java.awt.Dimension;
import java.awt.Point;
import java.util.List;

import view.modeling.ViewableAtomic;
import view.modeling.ViewableComponent;
import view.modeling.ViewableDigraph;
import DWLProject.utils.DWLUtils;
import GenCol.entity;

/**
 * DWL_1_1.java
 * 
 * @author CosMos, Ivan C, Enrique V
 *
 */
public class DWL_1_1 extends ViewableDigraph{

	private static final String CAT_FILE_IN = "CatFileIn";
	private static final String CAT_FILE_OUT = "CatFileOut";
	private static final String GET_FF = "GetFF";
	private static final String FF_OUT = "FFout";
    private static final String STOP = "stop";
    
	//In ports
    private static final String START = "start";
	private static final String FF_IN = "FFin";
	
	//Out ports
	private static final String LOAD = "load";
	private static final String ERROR_FILE = "errorFile";
	private static final String STATS = "stats";
	private static final String HALT = "halt";
	private static final String DP_DONE = "DPDone";
	private static final String CAT_OUT = "CatOut";
	private static final String EXT_CAT_OUT = "ExtCatOut";
	
	private int numberOfProcessors;
	// Add Default Constructor
    public DWL_1_1(){
        this("DWL", 1);
    }

    // Add Parameterized Constructor
    public DWL_1_1(String name, int numberOfProcessors){
        super(name);
        this.numberOfProcessors = numberOfProcessors;

// Structure information start
        // Add input port names
        addInport(START);
        addInport(FF_IN);
        addInport(STOP);

        // Add output port names
        addOutport(EXT_CAT_OUT);
        addOutport(LOAD);
        addOutport(ERROR_FILE);
        addOutport(STATS);
        addOutport(HALT);

        //add test input ports:
        addTestInput(STOP, new entity("stop"));

        // Initialize sub-components
        ViewableAtomic CommAgent_1_0 =  new CommAgent_0_0("CommAgent");
        DWL_Coord_0_0 Coord_1_0 =  new DWL_Coord_0_0("Coordinator");
        ViewableAtomic DataPartitioner_1_0 =  new DataPartitioner_0_0("DataPartitioner");

        // Add sub-components
        add(CommAgent_1_0);
        add(Coord_1_0);
        add(DataPartitioner_1_0);
        addLoaders(Coord_1_0);

        // Add Couplings
        addCoupling(CommAgent_1_0, FF_OUT, Coord_1_0, FF_IN);
        addCoupling(Coord_1_0, FF_OUT, DataPartitioner_1_0, FF_IN);
        addCoupling(Coord_1_0, GET_FF, CommAgent_1_0, START);
        addCoupling(DataPartitioner_1_0, CAT_FILE_OUT, Coord_1_0, CAT_FILE_IN);
        addCoupling(this, FF_IN, CommAgent_1_0, FF_IN);
        addCoupling(this, START, Coord_1_0, START);
        addCoupling(this, STOP, Coord_1_0, STOP);
        addCoupling(DataPartitioner_1_0, ERROR_FILE, this, ERROR_FILE);
        addCoupling(DataPartitioner_1_0, DP_DONE, Coord_1_0, DP_DONE);
        addCoupling(Coord_1_0, FF_OUT, this, STATS);
        addCoupling(Coord_1_0, CAT_OUT, this, STATS);
        addCoupling(DataPartitioner_1_0, DP_DONE, this, STATS);
        addCoupling(Coord_1_0, LOAD, this, LOAD);
        addCoupling(Coord_1_0, HALT, this, HALT);
        
        
// Structure information end
        initialize();
        }

    private void addLoaders(DWL_Coord_0_0 coordinator) {
    	List<Loader_0_0> loaderList = DWLUtils.createLoaders(numberOfProcessors);
    	for (Loader_0_0 loader : loaderList) {
    		add(loader);
    		addCoupling(coordinator, DWL_Coord_0_0.getCatOut(), loader, Loader_0_0.getCatIn());
    		addCoupling(loader, Loader_0_0.getDone(), coordinator, DWL_Coord_0_0.getLdrDone());
    		addCoupling(loader, Loader_0_0.getExtCatOut(), this, EXT_CAT_OUT);
    	}
    	coordinator.setLoaders(loaderList);
	}

    /**
     * Automatically generated by the SimView program.
     * Do not edit this manually, as such changes will get overwritten.
     */
    public void layoutForSimView()
    {
        preferredSize = new Dimension(610, 471);
        ((ViewableComponent)withName("Coordinator")).setPreferredLocation(new Point(183, 149));
        ((ViewableComponent)withName("Loader_1")).setPreferredLocation(new Point(258, 299));
        ((ViewableComponent)withName("DataPartitioner")).setPreferredLocation(new Point(21, 331));
        ((ViewableComponent)withName("CommAgent")).setPreferredLocation(new Point(16, 54));
    }
}
